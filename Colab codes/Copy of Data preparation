{"cells":[{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":251,"status":"ok","timestamp":1680485776501,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"KZHFECKGnqjU"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import os\n","import warnings\n","from google.colab import drive"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31433,"status":"ok","timestamp":1680485948958,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"BHfr3NxlnwmB","outputId":"15c64238-88e9-4440-c6b1-26738d8a367a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","                             MDM ID                     Serial Number  \\\n","0  00008f57773a8813a9bfe807ec82b62f  604e30e691987fc033977a9e4158654a   \n","1  0001dc012e8f7c60da0690074e4b82ba  572072b347861fe2eb2f474f430e3823   \n","2  0003d72bdbbf747066d059911e8dd67f  61a5019043d78d1eefe3653d55f9c945   \n","3  0004758615c128b65bd046d28529a50b  64018fa5d59544b36b457caa30ce0136   \n","4  0004bc0c8070ec31e136e97d8b78b7d2  6d2d9cc561c9be41c25c1e0a4881a653   \n","\n","   Printer Total  HW Revenue Registration_Dt  First Purchase Date  \\\n","0            NaN         NaN      2021-02-03                  NaN   \n","1            NaN         NaN      2020-11-13                  NaN   \n","2            NaN         NaN      2021-01-11                  NaN   \n","3            NaN         NaN      2021-05-08                  NaN   \n","4            NaN         NaN      2020-08-05                  NaN   \n","\n","   Last Purchase Date Product ID           Product Category NM  \\\n","0                 NaN     F0V69A  Multifunction and All-in-One   \n","1                 NaN     7FS74A  Multifunction and All-in-One   \n","2                 NaN     K7S00A  Multifunction and All-in-One   \n","3                 NaN     1L0H6A  Multifunction and All-in-One   \n","4                 NaN     Z3M52A  Multifunction and All-in-One   \n","\n","   Product Line NM  ...  hp_cc first_report  last_report  \\\n","0              NaN  ...  26.85   2018-05-31   2020-07-31   \n","1              NaN  ...   0.73   2020-11-30   2021-06-30   \n","2              NaN  ...   0.00   2021-01-31   2021-01-31   \n","3              NaN  ...   0.00   2021-05-31   2021-06-30   \n","4              NaN  ...   1.28   2020-08-31   2021-06-30   \n","\n","                    subscription_id     enrolled_on_date    subscription_date  \\\n","0                               NaN                  NaN                  NaN   \n","1                               NaN                  NaN                  NaN   \n","2  yi6tijzex3pwhx851gmmrbs99nwa1gei  2021-01-11 04:31:02  2021-01-11 04:31:19   \n","3                               NaN                  NaN                  NaN   \n","4                               NaN                  NaN                  NaN   \n","\n","  unsubscribe_date obsolete_date subscription_state  current_plan  \n","0              NaN           NaN                NaN           NaN  \n","1              NaN           NaN                NaN           NaN  \n","2              NaN           NaN         subscribed  15 Page Plan  \n","3              NaN           NaN                NaN           NaN  \n","4              NaN           NaN                NaN           NaN  \n","\n","[5 rows x 75 columns]\n"]}],"source":["###data_dir = 'Hackathon!/Data'\n","#file_name = data_dir + [file for file in os.listdir(data_dir) if \"csv\" in file][0]\n","\n","### raw_data\n","#raw_data = pd.read_csv(file_name )\n","\n","# Mount the shared drive\n","drive.mount('/content/drive')\n","\n","# Set the file path of the CSV file in the shared drive\n","file_path = '/content/drive/Shared drives/Hackathon!/Data/ucsd_US_print_dataset_03162023.csv'\n","\n","# Read the CSV file using Pandas\n","raw_data = pd.read_csv(file_path)\n","\n","# Print the first few rows of the data to verify that it was loaded correctly\n","print(raw_data.head())\n"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":3154,"status":"ok","timestamp":1680486051517,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"Ajnzt4qFpIiD"},"outputs":[],"source":["### create copy\n","data = raw_data.copy()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"P7sGJzaOpLYJ"},"outputs":[],"source":["### Calculate Fields"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":265,"status":"ok","timestamp":1680486057673,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"jt34wS7lpdub"},"outputs":[],"source":["def change_datetime_type(df):\n","\n","    df['Registration_Dt'] = pd.to_datetime(df['Registration_Dt'] , format = '%Y-%m-%d')\n","    df['first_report'] = pd.to_datetime(df['first_report'] , format = '%Y-%m-%d')\n","    df['last_report'] = pd.to_datetime(df['last_report'] , format = '%Y-%m-%d')\n","    df['enrolled_on_date'] = pd.to_datetime(df['enrolled_on_date'] , format = '%Y/%m/%d')\n","    df['subscription_date'] = pd.to_datetime(df['subscription_date'] , format = '%Y/%m/%d')\n","    df['unsubscribe_date'] = pd.to_datetime(df['unsubscribe_date'] , format = '%Y/%m/%d')\n","    df['obsolete_date'] = pd.to_datetime(df['obsolete_date'] , format = '%Y/%m/%d')\n","   \n","    return df"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":465,"status":"ok","timestamp":1680486059371,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"fTKGpVG-piu7"},"outputs":[],"source":["def make_columns(df):\n","    ### surppress warnings\n","    warnings.filterwarnings('ignore')\n","    \n","    df['Printer Total'] = df.groupby('MDM ID')['MDM ID'].transform('count')\n","    df['HW Revenue'] = df.groupby('MDM ID')['Product Price'].transform('sum')\n","    df['First Purchase Date'] = df.groupby('MDM ID')['Registration_Dt'].transform('min')\n","    df['Last Purchase Date'] = df.groupby('MDM ID')['Registration_Dt'].transform('max')\n","    \n","    return df"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":25830,"status":"ok","timestamp":1680486086646,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"0ckaAr5Fpk8F"},"outputs":[],"source":["data = change_datetime_type(data)\n","data = make_columns(data)"]},{"cell_type":"code","execution_count":21,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1058,"status":"ok","timestamp":1680488394622,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"daev5t2SxlvV","outputId":"20daf401-898e-4a59-b150-3272a96e367a"},"outputs":[{"name":"stdout","output_type":"stream","text":["                             MDM ID                     Serial Number  \\\n","0  00008f57773a8813a9bfe807ec82b62f  604e30e691987fc033977a9e4158654a   \n","1  0001dc012e8f7c60da0690074e4b82ba  572072b347861fe2eb2f474f430e3823   \n","2  0003d72bdbbf747066d059911e8dd67f  61a5019043d78d1eefe3653d55f9c945   \n","3  0004758615c128b65bd046d28529a50b  64018fa5d59544b36b457caa30ce0136   \n","4  0004bc0c8070ec31e136e97d8b78b7d2  6d2d9cc561c9be41c25c1e0a4881a653   \n","\n","   Printer Total  HW Revenue Registration_Dt First Purchase Date  \\\n","0              1       99.99      2021-02-03          2021-02-03   \n","1              1      101.65      2020-11-13          2020-11-13   \n","2              1      226.00      2021-01-11          2021-01-11   \n","3              2      886.74      2021-05-08          2021-05-08   \n","4              1      210.21      2020-08-05          2020-08-05   \n","\n","  Last Purchase Date Product ID           Product Category NM  \\\n","0         2021-02-03     F0V69A  Multifunction and All-in-One   \n","1         2020-11-13     7FS74A  Multifunction and All-in-One   \n","2         2021-01-11     K7S00A  Multifunction and All-in-One   \n","3         2021-05-08     1L0H6A  Multifunction and All-in-One   \n","4         2020-08-05     Z3M52A  Multifunction and All-in-One   \n","\n","   Product Line NM  ...  hp_cc first_report  last_report  \\\n","0              NaN  ...  26.85   2018-05-31   2020-07-31   \n","1              NaN  ...   0.73   2020-11-30   2021-06-30   \n","2              NaN  ...   0.00   2021-01-31   2021-01-31   \n","3              NaN  ...   0.00   2021-05-31   2021-06-30   \n","4              NaN  ...   1.28   2020-08-31   2021-06-30   \n","\n","                    subscription_id    enrolled_on_date   subscription_date  \\\n","0                               NaN                 NaT                 NaT   \n","1                               NaN                 NaT                 NaT   \n","2  yi6tijzex3pwhx851gmmrbs99nwa1gei 2021-01-11 04:31:02 2021-01-11 04:31:19   \n","3                               NaN                 NaT                 NaT   \n","4                               NaN                 NaT                 NaT   \n","\n","  unsubscribe_date obsolete_date subscription_state  current_plan  \n","0              NaT           NaT                NaN           NaN  \n","1              NaT           NaT                NaN           NaN  \n","2              NaT           NaT         subscribed  15 Page Plan  \n","3              NaT           NaT                NaN           NaN  \n","4              NaT           NaT                NaN           NaN  \n","\n","[5 rows x 75 columns]\n"]}],"source":["## predict hw revenue\n","# Drop rows where revenue is NaN\n","df = data.dropna(subset=['HW Revenue'])\n","\n","# Print the first few rows of the updated DataFrame\n","print(df.head())"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":532,"status":"ok","timestamp":1680488500197,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"RUOkdu7Exlxt","outputId":"6a336389-e32c-45fd-d3c1-3ee3ded78950"},"outputs":[{"name":"stdout","output_type":"stream","text":["                             MDM ID                     Serial Number  \\\n","0  00008f57773a8813a9bfe807ec82b62f  604e30e691987fc033977a9e4158654a   \n","1  0001dc012e8f7c60da0690074e4b82ba  572072b347861fe2eb2f474f430e3823   \n","2  0003d72bdbbf747066d059911e8dd67f  61a5019043d78d1eefe3653d55f9c945   \n","3  0004758615c128b65bd046d28529a50b  64018fa5d59544b36b457caa30ce0136   \n","4  0004bc0c8070ec31e136e97d8b78b7d2  6d2d9cc561c9be41c25c1e0a4881a653   \n","\n","   Printer Total  HW Revenue Registration_Dt First Purchase Date  \\\n","0              1       99.99      2021-02-03          2021-02-03   \n","1              1      101.65      2020-11-13          2020-11-13   \n","2              1      226.00      2021-01-11          2021-01-11   \n","3              2      886.74      2021-05-08          2021-05-08   \n","4              1      210.21      2020-08-05          2020-08-05   \n","\n","  Last Purchase Date Product ID           Product Category NM Part DN  ...  \\\n","0         2021-02-03     F0V69A  Multifunction and All-in-One  F0V69A  ...   \n","1         2020-11-13     7FS74A  Multifunction and All-in-One  7FS74A  ...   \n","2         2021-01-11     K7S00A  Multifunction and All-in-One  K7S00A  ...   \n","3         2021-05-08     1L0H6A  Multifunction and All-in-One  1L0H6A  ...   \n","4         2020-08-05     Z3M52A  Multifunction and All-in-One  Z3M52A  ...   \n","\n","   hp_cc  first_report last_report                   subscription_id  \\\n","0  26.85    2018-05-31  2020-07-31                               NaN   \n","1   0.73    2020-11-30  2021-06-30                               NaN   \n","2   0.00    2021-01-31  2021-01-31  yi6tijzex3pwhx851gmmrbs99nwa1gei   \n","3   0.00    2021-05-31  2021-06-30                               NaN   \n","4   1.28    2020-08-31  2021-06-30                               NaN   \n","\n","     enrolled_on_date   subscription_date unsubscribe_date obsolete_date  \\\n","0                 NaT                 NaT              NaT           NaT   \n","1                 NaT                 NaT              NaT           NaT   \n","2 2021-01-11 04:31:02 2021-01-11 04:31:19              NaT           NaT   \n","3                 NaT                 NaT              NaT           NaT   \n","4                 NaT                 NaT              NaT           NaT   \n","\n","   subscription_state  current_plan  \n","0                 NaN           NaN  \n","1                 NaN           NaN  \n","2          subscribed  15 Page Plan  \n","3                 NaN           NaN  \n","4                 NaN           NaN  \n","\n","[5 rows x 74 columns]\n"]}],"source":["# Drop the 'product line' column\n","df = df.drop('Product Line NM', axis=1)\n","\n","# Print the first few rows of the updated DataFrame\n","print(df.head())"]},{"cell_type":"code","execution_count":37,"metadata":{"executionInfo":{"elapsed":2928,"status":"ok","timestamp":1680489263049,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"AaehSWH46hKY"},"outputs":[],"source":["# cols_to_check = range(13,53) # Demographics/Psychographics from Acxiom\n","cols_to_check = df.columns[13:53]\n","df_sub = df.dropna(subset=cols_to_check, how='all') # Create a new DataFrame with rows where all columns are not NaN"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":149,"status":"ok","timestamp":1680489308778,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"T-ji7Kp86hM4","outputId":"5ce9a036-3a10-48a2-de42-cfb8b4c50170"},"outputs":[{"data":{"text/plain":["(755894, 74)"]},"execution_count":40,"metadata":{},"output_type":"execute_result"}],"source":["df_sub.shape"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":869},"executionInfo":{"elapsed":691,"status":"ok","timestamp":1680489934598,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"9824tmak6hPe","outputId":"e6d37731-f1c1-4629-e49e-23f11156f2f5"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-a68cf985-9dd7-423a-b4ca-f49da501a022\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eAge\u003c/th\u003e\n","      \u003cth\u003eHousehold Income\u003c/th\u003e\n","      \u003cth\u003eGender\u003c/th\u003e\n","      \u003cth\u003eOccupation\u003c/th\u003e\n","      \u003cth\u003eZip Code\u003c/th\u003e\n","      \u003cth\u003eElectronics Computing\u003c/th\u003e\n","      \u003cth\u003eHousehold Size\u003c/th\u003e\n","      \u003cth\u003eReading General\u003c/th\u003e\n","      \u003cth\u003eCrafts\u003c/th\u003e\n","      \u003cth\u003ePhotography\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003efirst_report\u003c/th\u003e\n","      \u003cth\u003elast_report\u003c/th\u003e\n","      \u003cth\u003esubscription_id\u003c/th\u003e\n","      \u003cth\u003eenrolled_on_date\u003c/th\u003e\n","      \u003cth\u003esubscription_date\u003c/th\u003e\n","      \u003cth\u003eunsubscribe_date\u003c/th\u003e\n","      \u003cth\u003eobsolete_date\u003c/th\u003e\n","      \u003cth\u003esubscription_state\u003c/th\u003e\n","      \u003cth\u003ecurrent_plan\u003c/th\u003e\n","      \u003cth\u003eProduct Category NM\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","      \u003ctd\u003e89408-7533\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e3.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2020-11-30\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e60051\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-05-31\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e8\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e34114\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e3.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2020-12-31\u003c/td\u003e\n","      \u003ctd\u003e2021-04-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e11\u003c/th\u003e\n","      \u003ctd\u003e72.0\u003c/td\u003e\n","      \u003ctd\u003eD\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e28624-9092\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2016-03-31\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e12\u003c/th\u003e\n","      \u003ctd\u003e36.0\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003eF\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e92109\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2020-02-29\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e69dcdwcq9skisk83dfb7jjaqkc4pct88\u003c/td\u003e\n","      \u003ctd\u003e2020-02-16 19:14:19\u003c/td\u003e\n","      \u003ctd\u003e2020-02-16 19:19:55\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e100 Page Plan\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169816\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2019-11-30\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e77bd74b090d4a8f5512e5919deaa314a36251fc0f0909c...\u003c/td\u003e\n","      \u003ctd\u003e2019-11-08 17:17:07\u003c/td\u003e\n","      \u003ctd\u003e2019-11-08 17:22:08\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e500 Page Plan\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169817\u003c/th\u003e\n","      \u003ctd\u003e78.0\u003c/td\u003e\n","      \u003ctd\u003eD\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003e92821\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2020-01-31\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e3e5585c69c205ce3ac1e308cb856e55618a3c4723ad498...\u003c/td\u003e\n","      \u003ctd\u003e2020-01-28 20:29:55\u003c/td\u003e\n","      \u003ctd\u003e2020-01-29 10:12:24\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e500 Page Plan\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169819\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e56528\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-01-31\u003c/td\u003e\n","      \u003ctd\u003e2021-04-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169821\u003c/th\u003e\n","      \u003ctd\u003e60.0\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003eF\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003e63129\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2016-08-31\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169824\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e75227\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2018-12-31\u003c/td\u003e\n","      \u003ctd\u003e2019-02-28\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eMultifunction and All-in-One\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e755894 rows × 62 columns\u003c/p\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a68cf985-9dd7-423a-b4ca-f49da501a022')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-a68cf985-9dd7-423a-b4ca-f49da501a022 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a68cf985-9dd7-423a-b4ca-f49da501a022');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["          Age Household Income Gender Occupation    Zip Code  \\\n","1         NaN                7      M          5  89408-7533   \n","3         NaN              NaN    NaN        NaN       60051   \n","8         NaN                5      M        NaN       34114   \n","11       72.0                D      M        NaN  28624-9092   \n","12       36.0                8      F        NaN       92109   \n","...       ...              ...    ...        ...         ...   \n","2169816   NaN              NaN    NaN        NaN         NaN   \n","2169817  78.0                D      M          8       92821   \n","2169819   NaN              NaN    NaN        NaN       56528   \n","2169821  60.0                2      F          8       63129   \n","2169824   NaN              NaN    NaN        NaN       75227   \n","\n","         Electronics Computing  Household Size  Reading General  Crafts  \\\n","1                          NaN             3.0              1.0     1.0   \n","3                          NaN             NaN              NaN     NaN   \n","8                          1.0             3.0              1.0     NaN   \n","11                         1.0             4.0              1.0     1.0   \n","12                         NaN             1.0              NaN     NaN   \n","...                        ...             ...              ...     ...   \n","2169816                    NaN             2.0              NaN     NaN   \n","2169817                    NaN             2.0              1.0     1.0   \n","2169819                    NaN             NaN              NaN     NaN   \n","2169821                    NaN             1.0              1.0     NaN   \n","2169824                    NaN             NaN              NaN     NaN   \n","\n","         Photography  ...  first_report  last_report  \\\n","1                1.0  ...    2020-11-30   2021-06-30   \n","3                NaN  ...    2021-05-31   2021-06-30   \n","8                1.0  ...    2020-12-31   2021-04-30   \n","11               NaN  ...    2016-03-31   2021-06-30   \n","12               NaN  ...    2020-02-29   2021-06-30   \n","...              ...  ...           ...          ...   \n","2169816          NaN  ...    2019-11-30   2021-06-30   \n","2169817          NaN  ...    2020-01-31   2021-06-30   \n","2169819          NaN  ...    2021-01-31   2021-04-30   \n","2169821          NaN  ...    2016-08-31   2021-06-30   \n","2169824          NaN  ...    2018-12-31   2019-02-28   \n","\n","                                           subscription_id  \\\n","1                                                      NaN   \n","3                                                      NaN   \n","8                                                      NaN   \n","11                                                     NaN   \n","12                        69dcdwcq9skisk83dfb7jjaqkc4pct88   \n","...                                                    ...   \n","2169816  77bd74b090d4a8f5512e5919deaa314a36251fc0f0909c...   \n","2169817  3e5585c69c205ce3ac1e308cb856e55618a3c4723ad498...   \n","2169819                                                NaN   \n","2169821                                                NaN   \n","2169824                                                NaN   \n","\n","           enrolled_on_date   subscription_date  unsubscribe_date  \\\n","1                       NaT                 NaT               NaT   \n","3                       NaT                 NaT               NaT   \n","8                       NaT                 NaT               NaT   \n","11                      NaT                 NaT               NaT   \n","12      2020-02-16 19:14:19 2020-02-16 19:19:55               NaT   \n","...                     ...                 ...               ...   \n","2169816 2019-11-08 17:17:07 2019-11-08 17:22:08               NaT   \n","2169817 2020-01-28 20:29:55 2020-01-29 10:12:24               NaT   \n","2169819                 NaT                 NaT               NaT   \n","2169821                 NaT                 NaT               NaT   \n","2169824                 NaT                 NaT               NaT   \n","\n","         obsolete_date  subscription_state   current_plan  \\\n","1                  NaT                 NaN            NaN   \n","3                  NaT                 NaN            NaN   \n","8                  NaT                 NaN            NaN   \n","11                 NaT                 NaN            NaN   \n","12                 NaT          subscribed  100 Page Plan   \n","...                ...                 ...            ...   \n","2169816            NaT          subscribed  500 Page Plan   \n","2169817            NaT          subscribed  500 Page Plan   \n","2169819            NaT                 NaN            NaN   \n","2169821            NaT                 NaN            NaN   \n","2169824            NaT                 NaN            NaN   \n","\n","                  Product Category NM  \n","1        Multifunction and All-in-One  \n","3        Multifunction and All-in-One  \n","8        Multifunction and All-in-One  \n","11       Multifunction and All-in-One  \n","12       Multifunction and All-in-One  \n","...                               ...  \n","2169816  Multifunction and All-in-One  \n","2169817  Multifunction and All-in-One  \n","2169819  Multifunction and All-in-One  \n","2169821  Multifunction and All-in-One  \n","2169824  Multifunction and All-in-One  \n","\n","[755894 rows x 62 columns]"]},"execution_count":46,"metadata":{},"output_type":"execute_result"}],"source":["# build dependent variable\n","y = df_sub[\"HW Revenue\"]\n","\n","# usage col 13-73 and 'Product Category NM' as predictor\n","x = df_sub.iloc[:, 13:74] # Select columns 13-73\n","x['Product Category NM'] = df_sub['Product Category NM']\n","x"]},{"cell_type":"code","execution_count":49,"metadata":{"executionInfo":{"elapsed":1581,"status":"ok","timestamp":1680490140061,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"S18YKXQIBHaN"},"outputs":[],"source":["# create dummy variables for \"Product Category NM\" using pandas get_dummies function\n","dummy_categories = pd.get_dummies(x['Product Category NM'])\n","\n","# combine the dummy variables with the original predictor variables\n","x = pd.concat([x.drop('Product Category NM', axis=1), dummy_categories], axis=1)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VRoBjEbcCqjH"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":52,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":762},"executionInfo":{"elapsed":728,"status":"ok","timestamp":1680490269711,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"C8pmHFjqBnpk","outputId":"245dedc5-bdd0-4190-ae93-296d32bc3873"},"outputs":[{"data":{"text/html":["\n","  \u003cdiv id=\"df-7e3c4b0c-56d7-410a-a58e-ddb590a20827\"\u003e\n","    \u003cdiv class=\"colab-df-container\"\u003e\n","      \u003cdiv\u003e\n","\u003cstyle scoped\u003e\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","\u003c/style\u003e\n","\u003ctable border=\"1\" class=\"dataframe\"\u003e\n","  \u003cthead\u003e\n","    \u003ctr style=\"text-align: right;\"\u003e\n","      \u003cth\u003e\u003c/th\u003e\n","      \u003cth\u003eAge\u003c/th\u003e\n","      \u003cth\u003eHousehold Income\u003c/th\u003e\n","      \u003cth\u003eGender\u003c/th\u003e\n","      \u003cth\u003eOccupation\u003c/th\u003e\n","      \u003cth\u003eZip Code\u003c/th\u003e\n","      \u003cth\u003eElectronics Computing\u003c/th\u003e\n","      \u003cth\u003eHousehold Size\u003c/th\u003e\n","      \u003cth\u003eReading General\u003c/th\u003e\n","      \u003cth\u003eCrafts\u003c/th\u003e\n","      \u003cth\u003ePhotography\u003c/th\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003cth\u003elast_report\u003c/th\u003e\n","      \u003cth\u003esubscription_id\u003c/th\u003e\n","      \u003cth\u003eenrolled_on_date\u003c/th\u003e\n","      \u003cth\u003esubscription_date\u003c/th\u003e\n","      \u003cth\u003eunsubscribe_date\u003c/th\u003e\n","      \u003cth\u003eobsolete_date\u003c/th\u003e\n","      \u003cth\u003esubscription_state\u003c/th\u003e\n","      \u003cth\u003ecurrent_plan\u003c/th\u003e\n","      \u003cth\u003eMultifunction and All-in-One\u003c/th\u003e\n","      \u003cth\u003ePrinters\u003c/th\u003e\n","    \u003c/tr\u003e\n","  \u003c/thead\u003e\n","  \u003ctbody\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e1\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e7\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","      \u003ctd\u003e89408-7533\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e3.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e3\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e60051\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e8\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e5\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e34114\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e3.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-04-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e11\u003c/th\u003e\n","      \u003ctd\u003e72.0\u003c/td\u003e\n","      \u003ctd\u003eD\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e28624-9092\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e4.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e12\u003c/th\u003e\n","      \u003ctd\u003e36.0\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003eF\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e92109\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e69dcdwcq9skisk83dfb7jjaqkc4pct88\u003c/td\u003e\n","      \u003ctd\u003e2020-02-16 19:14:19\u003c/td\u003e\n","      \u003ctd\u003e2020-02-16 19:19:55\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e100 Page Plan\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e...\u003c/th\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169816\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e77bd74b090d4a8f5512e5919deaa314a36251fc0f0909c...\u003c/td\u003e\n","      \u003ctd\u003e2019-11-08 17:17:07\u003c/td\u003e\n","      \u003ctd\u003e2019-11-08 17:22:08\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e500 Page Plan\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169817\u003c/th\u003e\n","      \u003ctd\u003e78.0\u003c/td\u003e\n","      \u003ctd\u003eD\u003c/td\u003e\n","      \u003ctd\u003eM\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003e92821\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e2.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003e3e5585c69c205ce3ac1e308cb856e55618a3c4723ad498...\u003c/td\u003e\n","      \u003ctd\u003e2020-01-28 20:29:55\u003c/td\u003e\n","      \u003ctd\u003e2020-01-29 10:12:24\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003esubscribed\u003c/td\u003e\n","      \u003ctd\u003e500 Page Plan\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169819\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e56528\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-04-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169821\u003c/th\u003e\n","      \u003ctd\u003e60.0\u003c/td\u003e\n","      \u003ctd\u003e2\u003c/td\u003e\n","      \u003ctd\u003eF\u003c/td\u003e\n","      \u003ctd\u003e8\u003c/td\u003e\n","      \u003ctd\u003e63129\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003e1.0\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2021-06-30\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","    \u003ctr\u003e\n","      \u003cth\u003e2169824\u003c/th\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e75227\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e...\u003c/td\u003e\n","      \u003ctd\u003e2019-02-28\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaT\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003eNaN\u003c/td\u003e\n","      \u003ctd\u003e1\u003c/td\u003e\n","      \u003ctd\u003e0\u003c/td\u003e\n","    \u003c/tr\u003e\n","  \u003c/tbody\u003e\n","\u003c/table\u003e\n","\u003cp\u003e755894 rows × 63 columns\u003c/p\u003e\n","\u003c/div\u003e\n","      \u003cbutton class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e3c4b0c-56d7-410a-a58e-ddb590a20827')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\"\u003e\n","        \n","  \u003csvg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\"\u003e\n","    \u003cpath d=\"M0 0h24v24H0V0z\" fill=\"none\"/\u003e\n","    \u003cpath d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/\u003e\u003cpath d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/\u003e\n","  \u003c/svg\u003e\n","      \u003c/button\u003e\n","      \n","  \u003cstyle\u003e\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  \u003c/style\u003e\n","\n","      \u003cscript\u003e\n","        const buttonEl =\n","          document.querySelector('#df-7e3c4b0c-56d7-410a-a58e-ddb590a20827 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-7e3c4b0c-56d7-410a-a58e-ddb590a20827');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '\u003ca target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb\u003edata table notebook\u003c/a\u003e'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      \u003c/script\u003e\n","    \u003c/div\u003e\n","  \u003c/div\u003e\n","  "],"text/plain":["          Age Household Income Gender Occupation    Zip Code  \\\n","1         NaN                7      M          5  89408-7533   \n","3         NaN              NaN    NaN        NaN       60051   \n","8         NaN                5      M        NaN       34114   \n","11       72.0                D      M        NaN  28624-9092   \n","12       36.0                8      F        NaN       92109   \n","...       ...              ...    ...        ...         ...   \n","2169816   NaN              NaN    NaN        NaN         NaN   \n","2169817  78.0                D      M          8       92821   \n","2169819   NaN              NaN    NaN        NaN       56528   \n","2169821  60.0                2      F          8       63129   \n","2169824   NaN              NaN    NaN        NaN       75227   \n","\n","         Electronics Computing  Household Size  Reading General  Crafts  \\\n","1                          NaN             3.0              1.0     1.0   \n","3                          NaN             NaN              NaN     NaN   \n","8                          1.0             3.0              1.0     NaN   \n","11                         1.0             4.0              1.0     1.0   \n","12                         NaN             1.0              NaN     NaN   \n","...                        ...             ...              ...     ...   \n","2169816                    NaN             2.0              NaN     NaN   \n","2169817                    NaN             2.0              1.0     1.0   \n","2169819                    NaN             NaN              NaN     NaN   \n","2169821                    NaN             1.0              1.0     NaN   \n","2169824                    NaN             NaN              NaN     NaN   \n","\n","         Photography  ...  last_report  \\\n","1                1.0  ...   2021-06-30   \n","3                NaN  ...   2021-06-30   \n","8                1.0  ...   2021-04-30   \n","11               NaN  ...   2021-06-30   \n","12               NaN  ...   2021-06-30   \n","...              ...  ...          ...   \n","2169816          NaN  ...   2021-06-30   \n","2169817          NaN  ...   2021-06-30   \n","2169819          NaN  ...   2021-04-30   \n","2169821          NaN  ...   2021-06-30   \n","2169824          NaN  ...   2019-02-28   \n","\n","                                           subscription_id  \\\n","1                                                      NaN   \n","3                                                      NaN   \n","8                                                      NaN   \n","11                                                     NaN   \n","12                        69dcdwcq9skisk83dfb7jjaqkc4pct88   \n","...                                                    ...   \n","2169816  77bd74b090d4a8f5512e5919deaa314a36251fc0f0909c...   \n","2169817  3e5585c69c205ce3ac1e308cb856e55618a3c4723ad498...   \n","2169819                                                NaN   \n","2169821                                                NaN   \n","2169824                                                NaN   \n","\n","           enrolled_on_date   subscription_date  unsubscribe_date  \\\n","1                       NaT                 NaT               NaT   \n","3                       NaT                 NaT               NaT   \n","8                       NaT                 NaT               NaT   \n","11                      NaT                 NaT               NaT   \n","12      2020-02-16 19:14:19 2020-02-16 19:19:55               NaT   \n","...                     ...                 ...               ...   \n","2169816 2019-11-08 17:17:07 2019-11-08 17:22:08               NaT   \n","2169817 2020-01-28 20:29:55 2020-01-29 10:12:24               NaT   \n","2169819                 NaT                 NaT               NaT   \n","2169821                 NaT                 NaT               NaT   \n","2169824                 NaT                 NaT               NaT   \n","\n","         obsolete_date  subscription_state   current_plan  \\\n","1                  NaT                 NaN            NaN   \n","3                  NaT                 NaN            NaN   \n","8                  NaT                 NaN            NaN   \n","11                 NaT                 NaN            NaN   \n","12                 NaT          subscribed  100 Page Plan   \n","...                ...                 ...            ...   \n","2169816            NaT          subscribed  500 Page Plan   \n","2169817            NaT          subscribed  500 Page Plan   \n","2169819            NaT                 NaN            NaN   \n","2169821            NaT                 NaN            NaN   \n","2169824            NaT                 NaN            NaN   \n","\n","         Multifunction and All-in-One  Printers  \n","1                                   1         0  \n","3                                   1         0  \n","8                                   1         0  \n","11                                  1         0  \n","12                                  1         0  \n","...                               ...       ...  \n","2169816                             1         0  \n","2169817                             1         0  \n","2169819                             1         0  \n","2169821                             1         0  \n","2169824                             1         0  \n","\n","[755894 rows x 63 columns]"]},"execution_count":52,"metadata":{},"output_type":"execute_result"},{"name":"stdout","output_type":"stream","text":["Warning: Total number of columns (63) exceeds max_columns (20) limiting to first (20) columns.\n","Warning: total number of rows (755894) exceeds max_rows (20000). Limiting to first (20000) rows.\n"]}],"source":["x"]},{"cell_type":"code","execution_count":56,"metadata":{"executionInfo":{"elapsed":235,"status":"ok","timestamp":1680490549946,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"CNhWVxZ8Cr5K"},"outputs":[],"source":["import pandas as pd\n","pd.set_option('display.max_rows', None)\n","pd.set_option('display.max_columns', None)"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":174,"status":"ok","timestamp":1680490552087,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"egKqW90kB-fw","outputId":"e692feb5-6545-49a8-b062-209ecb14474f"},"outputs":[{"data":{"text/plain":["Age                                          float64\n","Household Income                              object\n","Gender                                        object\n","Occupation                                    object\n","Zip Code                                      object\n","Electronics Computing                        float64\n","Household Size                               float64\n","Reading General                              float64\n","Crafts                                       float64\n","Photography                                  float64\n","Computers                                    float64\n","Computer Games                               float64\n","High Ticket Merchandise                      float64\n","Low Ticket Merchandise                       float64\n","Sports                                       float64\n","Exercise Health                              float64\n","Movie Music                                  float64\n","Home Improvement                             float64\n","High Tech Living                             float64\n","Number of Children                           float64\n","Education                                    float64\n","Purchase Propensity (PP) Laptop              float64\n","PP Small Format Printer                      float64\n","PP General Printer                           float64\n","PP Laser Printer                             float64\n","Buying Propensity (BP) Brother Ink           float64\n","BP Canon Ink                                 float64\n","BP HP Ink                                    float64\n","BP Printers Brother                          float64\n","BP Priners Canon                             float64\n","BP Printers Epson                            float64\n","BP PC Acer                                   float64\n","BP PC Lenovo                                 float64\n","IBE2058_AMEX_GOLD                            float64\n","IBE2058_AMEX_REGULAR                         float64\n","IBE2059_DISCOVER_GOLD                        float64\n","IBE2059_DISCOVER_REGULAR                     float64\n","IBE2061_MASTERCARD_GOLD                      float64\n","IBE2061_MASTERCARD_REGULAR                   float64\n","IBE2062_VISA_GOLD                            float64\n","IBE2062_VISA_REGULAR                         float64\n","lifetime_loyalty_class                        object\n","supply_selectability_number                   object\n","user_sub_environment                          object\n","ampv                                         float64\n","ave_cc_mo                                    float64\n","blk_cc_mo                                    float64\n","color_cc_mo                                  float64\n","hp_share                                     float64\n","days                                         float64\n","trade_cc                                     float64\n","hp_cc                                        float64\n","first_report                          datetime64[ns]\n","last_report                           datetime64[ns]\n","subscription_id                               object\n","enrolled_on_date                      datetime64[ns]\n","subscription_date                     datetime64[ns]\n","unsubscribe_date                      datetime64[ns]\n","obsolete_date                         datetime64[ns]\n","subscription_state                            object\n","current_plan                                  object\n","Multifunction and All-in-One                   uint8\n","Printers                                       uint8\n","dtype: object"]},"execution_count":57,"metadata":{},"output_type":"execute_result"}],"source":["x.dtypes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Mgq41ZFyCxjr"},"outputs":[],"source":["# change ojbect to float\n","x['Household Income'] = x['Household Income'].astype(float)\n","x['Gender'] = x['Gender'].apply(lambda v: 1 if v == 'F' else 0)\n","x['Occupation'] = x['Occupation'].astype(float)\n","# zip code map to continent, \n","# lifetime_loyalty_class, supply_selectability_number , user_sub_environment , \n","# get rid of subscription_id  "]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"output_embedded_package_id":"1RgUTUGnOE10qs61hvoF1Ygv16bibGRFy"},"id":"t2giRXdxCxp_","outputId":"1ee226dd-c788-4602-afcf-f1af6a0ef3f9"},"outputs":[],"source":["x[\"zip\"]"]},{"cell_type":"markdown","metadata":{"id":"IDxT07INBZhf"},"source":["create simple linear regression"]},{"cell_type":"code","execution_count":51,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":392},"executionInfo":{"elapsed":7559,"status":"error","timestamp":1680490246799,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"CI8N9xhOBXRv","outputId":"64f3848e-9aa9-4285-fffb-906b19eb16e5"},"outputs":[{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-51-7f8cccd3bd0b\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 12\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;31m# Fit the model on the training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 12\u001b[0;31m \u001b[0mreg_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0;31m# Evaluate the model on the test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/linear_model/_base.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    646\u001b[0m         \u001b[0maccept_sparse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpositive\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m\"csr\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"csc\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"coo\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    647\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 648\u001b[0;31m         X, y = self._validate_data(\n\u001b[0m\u001b[1;32m    649\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_numeric\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    650\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    582\u001b[0m                 \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"y\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    583\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 584\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    585\u001b[0m             \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    586\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1104\u001b[0m         )\n\u001b[1;32m   1105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 1106\u001b[0;31m     X = check_array(\n\u001b[0m\u001b[1;32m   1107\u001b[0m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m         \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maccept_sparse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 879\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    880\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/utils/_array_api.py\u001b[0m in \u001b[0;36m_asarray_with_order\u001b[0;34m(array, dtype, order, copy, xp)\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"numpy\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"numpy.array_api\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m         \u001b[0;31m# Use NumPy API to support order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 185\u001b[0;31m         \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   2062\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2063\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDTypeLike\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2064\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2065\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2066\u001b[0m     def __array_wrap__(\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'A'"]}],"source":["from sklearn.linear_model import LinearRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n","\n","# Create an instance of the linear regression model\n","reg_model = LinearRegression()\n","\n","# Fit the model on the training data\n","reg_model.fit(X_train, y_train)\n","\n","# Evaluate the model on the test data\n","y_pred = reg_model.predict(X_test)\n","mse = mean_squared_error(y_test, y_pred)\n","print(\"Mean squared error: \", mse)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nry0DaA7BXUc"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m2OdlwYgBXW8"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7WWAF2WwBXY6"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OrjpcVNvBXb0"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":47,"metadata":{"executionInfo":{"elapsed":2009,"status":"ok","timestamp":1680490076040,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"qE3ur-qG6hRh"},"outputs":[],"source":["# build regression model to predict total price spending\n","from sklearn.linear_model import LassoCV\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":392},"executionInfo":{"elapsed":6598,"status":"error","timestamp":1680490148642,"user":{"displayName":"Jinny Zhong","userId":"03337862563753182191"},"user_tz":420},"id":"A5PA6M7I6hW3","outputId":"8e099831-e91c-4159-ba5c-61f0087e09d7"},"outputs":[{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-50-05fad4112494\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 8\u003e\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# Fit the model on the training data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----\u003e 8\u001b[0;31m \u001b[0mlasso_cv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m# Evaluate the model on the test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/linear_model/_coordinate_descent.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1554\u001b[0m                 \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy_X\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1555\u001b[0m             )\n\u001b[0;32m-\u003e 1556\u001b[0;31m             X, y = self._validate_data(\n\u001b[0m\u001b[1;32m   1557\u001b[0m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidate_separately\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcheck_X_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_y_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1558\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    577\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"estimator\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcheck_X_params\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    578\u001b[0m                     \u001b[0mcheck_X_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mdefault_check_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_X_params\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 579\u001b[0;31m                 \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"X\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_X_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    580\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"estimator\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcheck_y_params\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    581\u001b[0m                     \u001b[0mcheck_y_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mdefault_check_params\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcheck_y_params\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    877\u001b[0m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    878\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 879\u001b[0;31m                     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_asarray_with_order\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    880\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mComplexWarning\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcomplex_warning\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    881\u001b[0m                 raise ValueError(\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/sklearn/utils/_array_api.py\u001b[0m in \u001b[0;36m_asarray_with_order\u001b[0;34m(array, dtype, order, copy, xp)\u001b[0m\n\u001b[1;32m    183\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"numpy\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"numpy.array_api\"\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    184\u001b[0m         \u001b[0;31m# Use NumPy API to support order\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--\u003e 185\u001b[0;31m         \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    186\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mxp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    187\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.9/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   2062\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2063\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnpt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDTypeLike\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u003e\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndarray\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-\u003e 2064\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2065\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2066\u001b[0m     def __array_wrap__(\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'A'"]}],"source":["# Split data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n","\n","# Create Lasso regression model with cross-validation\n","lasso_cv = LassoCV(cv=5, random_state=42)\n","\n","# Fit the model on the training data\n","lasso_cv.fit(X_train, y_train)\n","\n","# Evaluate the model on the test data\n","print(\"R-squared on test data:\", lasso_cv.score(X_test, y_test))"]}],"metadata":{"colab":{"name":"","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}